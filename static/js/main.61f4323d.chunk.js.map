{"version":3,"sources":["components/Input.js","components/Square.js","App.js","index.js"],"names":["Input","value","undefined","this","props","String","replace","id","className","type","placeholder","onChange","handleInputChange","onClick","handleRemoveLineClick","handleAddLineClick","line","handleDisplayLineClick","handleRenderClick","Component","Square","color","identifier","onPointerLeave","e","pressure","number","App","state","decNumber","binNumber","Array","fill","join","bind","handleSquareClick","BigInt","toString","binNumberLength","Number","length","i","setState","event","target","substr","string16Zeros","squareArray","key","push","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61f4323d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Input extends Component {\r\n  \r\n  \r\n  \r\n  render() {\r\n\r\n    let value = undefined\r\n    if (this.props.value) value = new String(this.props.value).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \") // add white space every 3 digits\r\n\r\n    return (\r\n      <div id=\"Input\">\r\n          <div className=\"input-container\">\r\n            <input \r\n              id=\"numberInput\" \r\n              type=\"text\" \r\n              placeholder=\"Entrez ici le nombre Ã  convertir en binaire\" \r\n              value={value}\r\n              onChange={this.props.handleInputChange}\r\n            ></input>\r\n          </div>\r\n          <div className='buttons-container'>\r\n            <button className=\"removeline\" onClick={this.props.handleRemoveLineClick}>\r\n              -\r\n            </button>\r\n            <button className=\"addline\" onClick={this.props.handleAddLineClick}>\r\n              +\r\n            </button>\r\n            <button className={`togglebitlines ${this.props.line === 'on' ? 'on' : 'off'}`} onClick={this.props.handleDisplayLineClick}>\r\n              |\r\n            </button>\r\n          </div>\r\n          <button className=\"render\" onClick={this.props.handleRenderClick}>\r\n            render\r\n          </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Input;","import React, { Component } from 'react'\r\n\r\nclass Square extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div \r\n                id=\"Square\" \r\n                className={`color${this.props.color}`} \r\n                onClick={() => {\r\n                    this.props.onClick(this.props.identifier)\r\n                }}\r\n                onPointerLeave={(e) => {\r\n                    if(e.pressure > 0) this.props.onClick(this.props.identifier)\r\n                }}\r\n            >\r\n                {this.props.number}\r\n            </div>\r\n        )\r\n    }\r\n  \r\n}\r\n\r\nexport default Square;","/* global BigInt */\r\n\r\nimport React, { Component } from 'react'\r\n\r\nimport './style/index.css'\r\n\r\nimport Input from './components/Input'\r\nimport Square from './components/Square'\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      decNumber: undefined,\r\n      binNumber: new Array(16).fill('0').join(''),\r\n      line: 'off',\r\n    }\r\n    this.handleRenderClick = this.handleRenderClick.bind(this)\r\n    this.handleInputChange = this.handleInputChange.bind(this)\r\n    this.handleSquareClick = this.handleSquareClick.bind(this)\r\n    this.handleAddLineClick = this.handleAddLineClick.bind(this)\r\n    this.handleRemoveLineClick = this.handleRemoveLineClick.bind(this)\r\n    this.handleDisplayLineClick = this.handleDisplayLineClick.bind(this)\r\n  }\r\n\r\n  handleRenderClick() {\r\n\r\n    // retrieving bin number from input\r\n    let binNumber = '0'\r\n    if (this.state.decNumber) binNumber = BigInt(this.state.decNumber).toString(2)\r\n\r\n    // adding 0s to fill the lines\r\n    let binNumberLength = new Number(binNumber.length)\r\n    for (let i = 0; i < 16 - binNumberLength % 16; i++) {\r\n      binNumber = '0' + binNumber\r\n    }\r\n\r\n    // setting binNumber in state after retrieving and generating corresponding squareArray to display\r\n    this.setState({ \r\n      binNumber: binNumber\r\n    })\r\n\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    this.setState({\r\n      decNumber: event.target.value.replace(/\\s/g, '') // remove all white spaces\r\n    })\r\n  }\r\n\r\n  handleSquareClick(i) {\r\n\r\n    // changing binNumber in state as well, switching corresponding 0 to 1 or vice versa + changing corresponding decNumber in input\r\n    let binNumber = this.state.binNumber\r\n    binNumber = binNumber.substr(0, i) + (binNumber[i] === \"1\" ? \"0\" : \"1\") + binNumber.substr(i + 1);\r\n    let decNumber = BigInt('0b' + binNumber).toString(10)\r\n    this.setState({\r\n      decNumber: decNumber,\r\n      binNumber: binNumber\r\n    })\r\n\r\n  }\r\n\r\n  handleAddLineClick() {\r\n\r\n    // generating 16 0s in the binNumber in state and regenerating squareArray to create a new black line of squares\r\n    let string16Zeros = new Array(16).fill(\"0\").join('')\r\n    this.setState({\r\n      binNumber: string16Zeros + this.state.binNumber,\r\n    })\r\n\r\n  }\r\n\r\n  handleRemoveLineClick() {\r\n\r\n    // deleting 16 first digits of binNumber and actualizing squareArray and decNumber\r\n    if (this.state.binNumber.length > 16) {\r\n      this.setState({\r\n        binNumber: this.state.binNumber.substr(16, this.state.binNumber.length),\r\n      }, () => {\r\n        this.state.squareArray = []\r\n        let key = 0\r\n        for (const i of this.state.binNumber) {\r\n          this.state.squareArray.push(<Square key={key} identifier={key} color={i} onClick={this.handleSquareClick}/>)\r\n          key++\r\n        }\r\n        let decNumber = BigInt('0b' + this.state.binNumber).toString(10)\r\n        this.setState({\r\n          decNumber: decNumber\r\n        }) // refresh\r\n      })\r\n    }\r\n    \r\n  }\r\n\r\n  handleDisplayLineClick() {\r\n    if(this.state.line === \"off\") {\r\n      this.setState({\r\n        line: \"on\"\r\n      })\r\n    } else {\r\n      this.setState({\r\n        line: \"off\"\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    let squareArray = []\r\n    let key = 0\r\n    for (const i of this.state.binNumber) {\r\n      squareArray.push(<Square key={key} identifier={key} color={i} onClick={this.handleSquareClick}/>)\r\n      key++\r\n    }\r\n\r\n    return (\r\n      <div id=\"App\">\r\n        <header>\r\n          <h1>Binary Number Image</h1>\r\n          <p>Kharoh Family Science Binary Number Image Convertor : convert any number to its binary image correspondance.</p>\r\n        </header>\r\n        <Input \r\n          handleRenderClick={this.handleRenderClick} \r\n          value={this.state.decNumber} \r\n          handleInputChange={this.handleInputChange}\r\n          handleAddLineClick={this.handleAddLineClick}\r\n          handleRemoveLineClick={this.handleRemoveLineClick}\r\n          handleDisplayLineClick={this.handleDisplayLineClick}\r\n          line={this.state.line}\r\n        />\r\n        <div id=\"Display\">\r\n          <div id=\"line1\" className={`line ${this.state.line}`}></div>\r\n          <div id=\"line2\" className={`line ${this.state.line}`}></div>\r\n          <div id=\"line3\" className={`line ${this.state.line}`}></div>\r\n          {squareArray ? squareArray : <div></div>}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}